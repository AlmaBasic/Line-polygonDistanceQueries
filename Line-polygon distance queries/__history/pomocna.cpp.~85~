//---------------------------------------------------------------------------

#pragma hdrstop

#include "pomocna.h"
#include <cmath>


void Tacka::Crtaj(TImage* slika) {
    //slika->Canvas->Brush->Color = clRed;
    slika->Canvas->Ellipse(Rect(x-3,y-3,x+3, y+3));
}

bool operator<(Tacka A, Tacka B) {
	if(A.x < B.x) return true;
	if(A.x == B.x) return A.y < B.y;
	return false;
}

/////////////////////////////////////////////////////////////

int Orijentacija(Tacka A, Tacka B, Tacka C) {
	int P = A.x*(B.y-C.y) + B.x*(C.y-A.y)+ C.x*(A.y - B.y);
	if(P > 0) return -1;
	else if(P < 0) return 1;
	else return 0;
}


/////////////////////////////////////////////////////////////

void IscrtajPoligon(vector<Tacka> &A, TImage* slika) {
	slika->Canvas->MoveTo(A[A.size()-1].x,A[A.size()-1].y);
	for(int i = 0; i < A.size(); i++)
	  slika->Canvas->LineTo(A[i].x,A[i].y);
}

/////////////////////////////////////////////////////////////

pair<double,double> JednacinaPrave(Tacka A, Tacka B){
   double k = (B.y - A.y)/(B.x - A.x);
   double n = A.y - A.x * k;
   pair<double, double> l;
   l = make_pair(k,n);
   return l;
}

/////////////////////////////////////////////////////////////

void ProjekcijeVrhovaNaPravu(vector<Tacka> &poligon, vector<Tacka> &prava, vector<Tacka> &projekcije){
	pair<double, double> l = JednacinaPrave(prava[0], prava[1]);
	double kp = l.first;
	double np = l.second;

	double k = - 1 / kp;
	vector<double> ni;

	//trazimo vrijednost parametra n koji definise pravu koja je okomita na
	//pravu l, kako bismo mogli odrediti projekciju svakog vrha poligona na
	//pravu l, a potom izracunati rastojanje jer najmanje rastojanje izmedu
	//prave i tacke jeste ono koje je pod pravim uglom
	// n oderdujemo iz uslova n = y - kx gdje su x i y koordinate tacke za koju
    // trazimo projekciju
	for(int i=0; i<poligon.size(); i++){
		double n = poligon[i].y - k * poligon[i].x;
		ni.push_back(n);
	}

	//sada trazimo presjek ovih pravih i prave l
	for(int i=0; i<poligon.size(); i++){
		double x = (ni[i] - np) / (kp - k);
		double y = kp * x + np;

		Tacka nova(x,y);
        projekcije.push_back(nova);
	}
}

/////////////////////////////////////////////////////////////

//cuvamo kvadrate udaljenosti da ne gubimo na preciznosti prilikom korjenovanja
//jer nam nije bitna sama vrijednost za poredenje
double Udaljenost(Tacka A, Tacka B){
	double d = (B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y);
    return sqrt(d);
}

/////////////////////////////////////////////////////////////

void NajblizaTacka(vector<Tacka> &poligon, vector<Tacka> &projekcije, int &indeks){
	int n = poligon.size();
    int P = 0, K = n-1;
	while(K - P > 1){
		int S = (P + K) / 2;

		if(Udaljenost(poligon[S],projekcije[S]) < Udaljenost(poligon[(S+n-1)%n], projekcije[(S+n-1)%n]) &&
			Udaljenost(poligon[S], projekcije[S]) < Udaljenost(poligon[(S+1)%n],projekcije[(S+1)%n])){
			indeks = S;
			break;
		}
		else if(Udaljenost(poligon[(S+n-1)%n], projekcije[(S+n-1)%n]) < Udaljenost(poligon[S], projekcije[S]) ){
			if(Udaljenost(poligon[K], projekcije[K]) < Udaljenost(poligon[P], projekcije[P]) &&
			Udaljenost(poligon[K], projekcije[K]) < Udaljenost(poligon[(K-1)%n], projekcije[(K-1)%n])){
				indeks = K;
				break;
			}
			else if(Udaljenost(poligon[(K-1)%n], projekcije[(K-1)%n]) < Udaljenost(poligon[K], projekcije[K])){
				P = S + 1;
			}
			else{
				K = S - 1;
			}
		}
		else {
			if(Udaljenost(poligon[P], projekcije[P]) < Udaljenost(poligon[(P+1)%n], projekcije[(P+1)%n]) &&
			Udaljenost(poligon[P], projekcije[P]) < Udaljenost(poligon[K], projekcije[K])){
				//P je najbliza
				indeks = P;
				break;
			}
			else if(Udaljenost(poligon[(P+1)%n], projekcije[(P+1)%n]) < Udaljenost(poligon[P], projekcije[P])){
				K = S - 1;
			}
			else{
				P = S + 1;
			}
		}
		if(indeks == -1){
			if(K == P){
				indeks = P;
			}
			else if(Udaljenost(poligon[P], projekcije[P]) < Udaljenost(poligon[K], projekcije[K])){
				indeks = P;
			}
			else{
				indeks = K;
			}
		}
	}
}

//---------------------------------------------------------------------------
#pragma package(smart_init)
